(()=>{"use strict";var __webpack_modules__={56:()=>{eval("\n;// ./ts/constants.ts\n/**\n * Game Constants\n */\n// Element IDs\nvar ELEMENT_IDS = {\n    FIELD: 'field',\n    SCOREBOARD: 'scoreboard',\n    LEVELINFO: 'levelinfo',\n    WRAPPER: 'wrapper',\n    RESTART: 'restart'\n};\n// CSS Classes\nvar CSS_CLASSES = {\n    GEM: 'gem',\n    CHOSEN: 'chosen',\n    DEAD: 'dead',\n    DRAGGING: 'dragging',\n    DRAG_TARGET: 'drag-target'\n};\n// Game States\nvar GemState;\n(function (GemState) {\n    GemState[\"ALIVE\"] = \"alive\";\n    GemState[\"DEAD\"] = \"dead\";\n})(GemState || (GemState = {}));\n// Data Attributes\nvar DATA_ATTRIBUTES = {\n    J: 'data-j',\n    K: 'data-k',\n    COLOR: 'data-color'\n};\n// Game Settings\nvar DEFAULT_SETTINGS = {\n    INITIAL_SIZE: 12, // Fixed grid size to 10x10 for better gameplay\n    MIN_LINE: 3,\n    INITIAL_COLORS: 4,\n    INITIAL_TIME: 180,\n    FIELD_SIZE: 500, // pixels\n    ANIMATION_DELAY: 150, // milliseconds - reduced from 200ms\n    SWAP_DELAY: 150, // milliseconds - reduced from 200ms\n    KILL_DELAY: 300, // milliseconds - reduced from 450ms\n    LEVEL_START_DELAY: 500, // milliseconds\n    COUNTDOWN_INTERVAL: 1000, // milliseconds\n    SCORE_MULTIPLIER: 36,\n    // Animation settings\n    FALL_DELAY_PER_ROW: 15, // milliseconds delay per row - reduced from 30ms\n    FALL_ANIMATION_DURATION: 250, // milliseconds - reduced from 400ms\n    BOUNCE_DELAY: 100, // milliseconds - reduced from 150ms (though no longer used)\n    // Target score calculation constants\n    TARGET_SCORE_BASE: 10000,\n    TARGET_SCORE_FACTOR: Math.sqrt, // Function to apply to level number\n    // Time settings\n    TIME_INCREASE_PER_LEVEL: 2.5 // Additional seconds per level (level * 5 / 2)\n};\n// Gem Symbols\nvar GEM_SYMBOLS = ['⚜', '☄', '♗', '♆', '♙', '❦', '☣', '♞', '♨', '♟'];\n// Match Chain Actions\nvar MatchAction;\n(function (MatchAction) {\n    MatchAction[\"CHECK\"] = \"check\";\n})(MatchAction || (MatchAction = {}));\n\n;// ./ts/Gem.ts\n\n/**\n * Represents a gem in the Match3 game\n */\nvar Gem = /** @class */ (function () {\n    function Gem(element, boardSize) {\n        this._elem = element;\n        this._state = GemState.DEAD;\n        this._color = 0;\n        this._boardSize = boardSize;\n        // Add CSS transition for smoother animations\n        this._elem.style.transition = 'top 0.3s cubic-bezier(0.215, 0.610, 0.355, 1.000), left 0.15s ease-in, transform 0.2s ease-out, opacity 0.15s ease-out';\n    }\n    Object.defineProperty(Gem.prototype, \"elem\", {\n        /**\n         * Gets the HTML element representing the gem\n         */\n        get: function () {\n            return this._elem;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Gem.prototype, \"state\", {\n        /**\n         * Gets the current state of the gem\n         */\n        get: function () {\n            return this._state;\n        },\n        /**\n         * Sets the current state of the gem\n         */\n        set: function (value) {\n            this._state = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Gem.prototype, \"color\", {\n        /**\n         * Gets the color of the gem\n         */\n        get: function () {\n            return this._color;\n        },\n        /**\n         * Sets the color of the gem\n         */\n        set: function (value) {\n            this._color = value;\n            this._elem.innerHTML = value >= 0 ? \"\".concat(value) : '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Updates the board size reference\n     */\n    Gem.prototype.updateBoardSize = function (size) {\n        this._boardSize = size;\n    };\n    /**\n     * Kills the gem (marks it as dead and animates it off the board)\n     */\n    Gem.prototype.kill = function () {\n        // Mark the gem as dead\n        this._state = GemState.DEAD;\n        // Add the dead class to apply CSS styles\n        this._elem.classList.add(CSS_CLASSES.DEAD);\n        // Make sure transitions are reset\n        this._elem.style.transition = 'none';\n        this._elem.style.transform = 'none';\n        this._elem.style.opacity = '1';\n        // Force a reflow to ensure the reset is applied\n        void this._elem.offsetWidth;\n        // Set up the animation - make it faster (0.4s instead of 0.6s)\n        this._elem.style.transition = 'transform 0.4s ease-in, opacity 0.4s ease-in';\n        // Direct falling down animation\n        this._elem.style.transform = 'translateY(100%) scale(0.8)';\n        this._elem.style.opacity = '0';\n    };\n    /**\n     * Places the gem at its correct position on the board\n     */\n    Gem.prototype.place = function () {\n        var j = parseInt(this._elem.getAttribute(DATA_ATTRIBUTES.J) || '0', 10);\n        var k = parseInt(this._elem.getAttribute(DATA_ATTRIBUTES.K) || '0', 10);\n        // Use linear transition for smoother falling\n        this._elem.style.transition = \"top \".concat(DEFAULT_SETTINGS.FALL_ANIMATION_DURATION / 1000, \"s linear, left 0.15s linear, transform 0.15s ease-out, opacity 0.15s ease-out\");\n        // Simplify the transform - no bounce effect for smoother animation\n        this._elem.style.transform = 'scale(1)';\n        this._elem.style.opacity = '1';\n        // Position the gem\n        this._elem.style.top = \"\".concat(j * (100 / this._boardSize), \"%\");\n        this._elem.style.left = \"\".concat(k * (100 / this._boardSize), \"%\");\n    };\n    return Gem;\n}());\n\n\n;// ./ts/SoundManager.ts\n/**\n * Sound manager for the Match3 game\n * Handles loading and playing sound effects\n */\nvar SoundManager = /** @class */ (function () {\n    /**\n     * Private constructor to enforce singleton pattern\n     */\n    function SoundManager() {\n        this.sounds = new Map();\n        this.enabled = true;\n        this.backgroundMusic = null;\n        this.audioContext = null;\n        this.hasUserInteraction = false;\n        this.loadSounds();\n        this.initBackgroundMusic();\n    }\n    /**\n     * Get the singleton instance\n     */\n    SoundManager.getInstance = function () {\n        if (!SoundManager.instance) {\n            SoundManager.instance = new SoundManager();\n        }\n        return SoundManager.instance;\n    };\n    /**\n     * Load all sound effects\n     */\n    SoundManager.prototype.loadSounds = function () {\n        this.loadSound(SoundManager.SOUND_EFFECTS.EXPLOSION, 'explosion.mp3');\n        this.loadSound(SoundManager.SOUND_EFFECTS.FAIL, 'fail.mp3');\n        this.loadSound(SoundManager.SOUND_EFFECTS.FILL, 'fill.mp3');\n        this.loadSound(SoundManager.SOUND_EFFECTS.SWAP, 'swap.mp3');\n        this.loadSound(SoundManager.SOUND_EFFECTS.TURN, 'turn.mp3');\n    };\n    /**\n     * Initialize background music\n     */\n    SoundManager.prototype.initBackgroundMusic = function () {\n        this.backgroundMusic = new Audio('audio/bg_theme.mp3');\n        this.backgroundMusic.loop = true;\n        this.backgroundMusic.volume = 0.3; // Lower volume for background music\n        // Create audio context for better control\n        try {\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        }\n        catch (e) {\n            console.warn('Web Audio API not supported in this browser');\n        }\n    };\n    /**\n     * Load a single sound effect\n     */\n    SoundManager.prototype.loadSound = function (name, filename) {\n        var audio = new Audio(\"audio/\".concat(filename));\n        audio.preload = 'auto';\n        this.sounds.set(name, audio);\n    };\n    /**\n     * Play a sound effect\n     */\n    SoundManager.prototype.play = function (name) {\n        if (!this.enabled)\n            return;\n        var sound = this.sounds.get(name);\n        if (sound) {\n            // Clone the audio element to allow overlapping sounds\n            var soundClone = sound.cloneNode();\n            soundClone.volume = 0.5; // Set volume to 50%\n            soundClone.play().catch(function (error) {\n                console.warn(\"Error playing sound \".concat(name, \":\"), error);\n            });\n        }\n    };\n    /**\n     * Start playing background music\n     */\n    SoundManager.prototype.playBackgroundMusic = function () {\n        if (!this.enabled || !this.backgroundMusic)\n            return;\n        // Only play if not already playing\n        if (this.backgroundMusic.paused) {\n            // Resume audio context if it exists and is suspended\n            if (this.audioContext && this.audioContext.state === 'suspended') {\n                this.audioContext.resume().catch(function (error) {\n                    console.warn('Error resuming AudioContext:', error);\n                });\n            }\n            // Play the background music\n            this.backgroundMusic.play().catch(function (error) {\n                // If autoplay was prevented, we'll wait for user interaction\n                console.warn('Error playing background music (likely autoplay restriction):', error);\n            });\n        }\n    };\n    /**\n     * Pause background music\n     */\n    SoundManager.prototype.pauseBackgroundMusic = function () {\n        if (this.backgroundMusic && !this.backgroundMusic.paused) {\n            this.backgroundMusic.pause();\n        }\n    };\n    /**\n     * Enable or disable all sounds\n     */\n    SoundManager.prototype.setEnabled = function (enabled) {\n        this.enabled = enabled;\n        // Handle background music based on enabled state\n        if (!enabled) {\n            this.pauseBackgroundMusic();\n        }\n        else if (this.backgroundMusic) {\n            this.playBackgroundMusic();\n        }\n    };\n    /**\n     * Toggle sound on/off\n     */\n    SoundManager.prototype.toggleSound = function () {\n        this.enabled = !this.enabled;\n        // Handle background music based on new enabled state\n        if (!this.enabled) {\n            this.pauseBackgroundMusic();\n        }\n        else {\n            this.playBackgroundMusic();\n        }\n        return this.enabled;\n    };\n    /**\n     * Check if sound is enabled\n     */\n    SoundManager.prototype.isEnabled = function () {\n        return this.enabled;\n    };\n    /**\n     * Mark that user interaction has occurred\n     */\n    SoundManager.prototype.userInteractionOccurred = function () {\n        this.hasUserInteraction = true;\n        // Resume audio context if it was suspended\n        if (this.audioContext && this.audioContext.state === 'suspended') {\n            this.audioContext.resume().catch(function (error) {\n                console.warn('Error resuming AudioContext:', error);\n            });\n        }\n        // Try to play background music now that we have user interaction\n        if (this.enabled) {\n            this.playBackgroundMusic();\n        }\n    };\n    // Sound effect names\n    SoundManager.SOUND_EFFECTS = {\n        EXPLOSION: 'explosion',\n        EXPLOSION_BIG: 'explosion_big',\n        FAIL: 'fail',\n        FILL: 'fill',\n        SWAP: 'swap',\n        TURN: 'turn',\n        YES: 'yes',\n        BG_THEME: 'bg_theme'\n    };\n    return SoundManager;\n}());\n\n\n;// ./ts/Board.ts\n\n\n\n/**\n * Represents the game board in the Match3 game\n */\nvar Board = /** @class */ (function () {\n    function Board(element, size, minLine, colors) {\n        this._gems = [];\n        this._element = element;\n        this._size = size;\n        this._minLine = minLine;\n        this._colors = colors;\n        this._soundManager = SoundManager.getInstance();\n        this.createMap(size, minLine, colors);\n    }\n    Object.defineProperty(Board.prototype, \"size\", {\n        /**\n         * Gets the size of the board\n         */\n        get: function () {\n            return this._size;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Board.prototype, \"minLine\", {\n        /**\n         * Gets the minimum line length for matches\n         */\n        get: function () {\n            return this._minLine;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Board.prototype, \"colors\", {\n        /**\n         * Gets the number of colors used in the board\n         */\n        get: function () {\n            return this._colors;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets a gem at the specified position\n     */\n    Board.prototype.getGem = function (j, k) {\n        return this._gems[j][k];\n    };\n    /**\n     * Creates the game board with the specified parameters\n     */\n    Board.prototype.createMap = function (size, minLine, colors) {\n        // Validate game configuration\n        if (!this.isValidGameConfiguration(size, colors)) {\n            this.displayInvalidConfigurationMessage(size, colors);\n            return false;\n        }\n        // Clear the field\n        this.clearField();\n        // Initialize gems array\n        this.initializeGemsArray(size);\n        // Create gem elements\n        this.createGemElements();\n        // Set gem sizes\n        this.setGemElementSizes();\n        // Fill the board with gems\n        this.fillMap();\n        return true;\n    };\n    /**\n     * Checks if the game configuration is valid\n     */\n    Board.prototype.isValidGameConfiguration = function (size, colors) {\n        return size > 1 && colors > 1 && this._minLine > 1;\n    };\n    /**\n     * Displays an error message when configuration is invalid\n     */\n    Board.prototype.displayInvalidConfigurationMessage = function (size, colors) {\n        this._element.innerHTML = \"A field with the following parameters: size: \".concat(size, \", colors: \").concat(colors, \", min. line length: \").concat(this._minLine, \", cannot be generated.\");\n    };\n    /**\n     * Clears the field element\n     */\n    Board.prototype.clearField = function () {\n        this._element.innerHTML = '';\n    };\n    /**\n     * Initializes the gems array with the given size\n     */\n    Board.prototype.initializeGemsArray = function (size) {\n        this._gems = [];\n        for (var i = 0; i < size; i++) {\n            this._gems[i] = [];\n        }\n    };\n    /**\n     * Creates gem elements and adds them to the board\n     */\n    Board.prototype.createGemElements = function () {\n        for (var j = 0; j < this._size; j++) {\n            for (var k = 0; k < this._size; k++) {\n                var gemElement = document.createElement('div');\n                gemElement.className = CSS_CLASSES.GEM;\n                gemElement.setAttribute(DATA_ATTRIBUTES.J, j.toString());\n                gemElement.setAttribute(DATA_ATTRIBUTES.K, k.toString());\n                gemElement.setAttribute(DATA_ATTRIBUTES.COLOR, '');\n                this._element.appendChild(gemElement);\n                this._gems[j][k] = new Gem(gemElement, this._size);\n            }\n        }\n    };\n    /**\n     * Sets the size of gem elements\n     */\n    Board.prototype.setGemElementSizes = function () {\n        var gemElements = document.querySelectorAll(\".\".concat(CSS_CLASSES.GEM));\n        gemElements.forEach(function (gemElem) {\n            var gem = gemElem;\n            gem.style.width = \"\".concat(100 / DEFAULT_SETTINGS.INITIAL_SIZE, \"%\");\n            gem.style.height = \"\".concat(100 / DEFAULT_SETTINGS.INITIAL_SIZE, \"%\");\n            // gem.style.fontSize = DEFAULT_SETTINGS.FIELD_SIZE / (this._size * 2) + 'px';\n        });\n    };\n    /**\n     * Fills the board with gems\n     */\n    Board.prototype.fillMap = function () {\n        // Create new gems for each empty position\n        for (var j = 0; j < this._size; j++) {\n            var _loop_1 = function (k) {\n                if (this_1._gems[j][k].state === GemState.DEAD) {\n                    // Remove the old dead gem element after animation completes\n                    var deadGem_1 = this_1._gems[j][k].elem;\n                    setTimeout(function () {\n                        if (deadGem_1.parentNode) {\n                            deadGem_1.remove();\n                        }\n                    }, DEFAULT_SETTINGS.KILL_DELAY);\n                    // Create a completely new gem element\n                    this_1.createBrandNewGem(j, k);\n                }\n            };\n            var this_1 = this;\n            for (var k = 0; k < this._size; k++) {\n                _loop_1(k);\n            }\n        }\n        // Play fill sound\n        this._soundManager.play(SoundManager.SOUND_EFFECTS.FILL);\n        // Animate all gems into place\n        this.placeAll();\n    };\n    /**\n     * Creates a completely new gem element at the specified position\n     */\n    Board.prototype.createBrandNewGem = function (j, k) {\n        // Create a new DOM element for the gem\n        var gemElement = document.createElement('div');\n        gemElement.className = CSS_CLASSES.GEM;\n        gemElement.setAttribute(DATA_ATTRIBUTES.J, String(j - 2));\n        gemElement.setAttribute(DATA_ATTRIBUTES.K, String(k));\n        // Set the gem size\n        gemElement.style.width = \"\".concat(100 / DEFAULT_SETTINGS.INITIAL_SIZE, \"%\");\n        gemElement.style.height = \"\".concat(100 / DEFAULT_SETTINGS.INITIAL_SIZE, \"%\");\n        // Calculate how far above the board this gem should start\n        var startingYPosition = -(2 * DEFAULT_SETTINGS.FIELD_SIZE / this._size);\n        // Position the gem initially above the board for animation\n        gemElement.style.top = \"\".concat(startingYPosition, \"px\");\n        gemElement.style.left = \"\".concat(k * (100 / DEFAULT_SETTINGS.INITIAL_SIZE), \"%\");\n        // Add some initial transform for a more dynamic entrance\n        gemElement.style.transform = \"scale(0.8) rotate(\".concat(Math.random() * 20 - 10, \"deg)\");\n        gemElement.style.opacity = '0.9';\n        // Add the gem element to the board\n        this._element.appendChild(gemElement);\n        // Create a new Gem object\n        this._gems[j][k] = new Gem(gemElement, this._size);\n        // Set the gem to alive state\n        this._gems[j][k].state = GemState.ALIVE;\n        // Find a valid color that doesn't create matches\n        var color;\n        do {\n            color = Math.floor(Math.random() * this._colors);\n        } while (this.willCreateMatch(j, k, color));\n        // Set the gem color\n        this._gems[j][k].color = color;\n        gemElement.setAttribute(DATA_ATTRIBUTES.COLOR, String(color));\n        gemElement.innerHTML = GEM_SYMBOLS[color];\n        // Update the gem's position attributes to its final position\n        gemElement.setAttribute(DATA_ATTRIBUTES.J, String(j));\n    };\n    /**\n     * Creates a new gem at the specified position (deprecated, kept for reference)\n     */\n    Board.prototype.createNewGem = function (j, k) {\n        // This method is now deprecated in favor of createBrandNewGem\n        // which creates completely new DOM elements instead of reusing old ones\n        this.createBrandNewGem(j, k);\n    };\n    /**\n     * Checks if placing a gem with the given color at the specified position will create a match\n     */\n    Board.prototype.willCreateMatch = function (j, k, color) {\n        // Check horizontal matches\n        var count = 1;\n        var l = k - 1;\n        while (l >= 0 && this._gems[j][l].state === GemState.ALIVE && this._gems[j][l].color === color) {\n            count++;\n            l--;\n        }\n        l = k + 1;\n        while (l < this._size && this._gems[j][l].state === GemState.ALIVE && this._gems[j][l].color === color) {\n            count++;\n            l++;\n        }\n        if (count >= this._minLine)\n            return true;\n        // Check vertical matches\n        count = 1;\n        l = j - 1;\n        while (l >= 0 && this._gems[l][k].state === GemState.ALIVE && this._gems[l][k].color === color) {\n            count++;\n            l--;\n        }\n        l = j + 1;\n        while (l < this._size && this._gems[l][k].state === GemState.ALIVE && this._gems[l][k].color === color) {\n            count++;\n            l++;\n        }\n        if (count >= this._minLine)\n            return true;\n        return false;\n    };\n    /**\n     * Places all gems on the board\n     */\n    Board.prototype.placeAll = function () {\n        var _this = this;\n        var _loop_2 = function (j) {\n            var _loop_3 = function (k) {\n                // Delay the animation based on the row position\n                // Gems at the top of the board (smaller j) will fall later\n                var delay = (this_2._size - j) * DEFAULT_SETTINGS.FALL_DELAY_PER_ROW;\n                setTimeout(function () {\n                    _this._gems[j][k].place();\n                }, delay);\n            };\n            for (var k = 0; k < this_2._size; k++) {\n                _loop_3(k);\n            }\n        };\n        var this_2 = this;\n        // Stagger the animation for a cascading effect\n        for (var j = this._size - 1; j >= 0; j--) {\n            _loop_2(j);\n        }\n    };\n    /**\n     * Swaps two gems on the board\n     */\n    Board.prototype.swap = function (j1, k1, j2, k2) {\n        // Update gem positions in the DOM\n        this._gems[j1][k1].elem.setAttribute(DATA_ATTRIBUTES.J, j2.toString());\n        this._gems[j1][k1].elem.setAttribute(DATA_ATTRIBUTES.K, k2.toString());\n        this._gems[j2][k2].elem.setAttribute(DATA_ATTRIBUTES.J, j1.toString());\n        this._gems[j2][k2].elem.setAttribute(DATA_ATTRIBUTES.K, k1.toString());\n        // Swap gems in the array\n        var temp = this._gems[j1][k1];\n        this._gems[j1][k1] = this._gems[j2][k2];\n        this._gems[j2][k2] = temp;\n    };\n    /**\n     * Checks if a move between two positions is valid\n     */\n    Board.prototype.isCorrectTurn = function (j1, k1, j2, k2) {\n        // Check if both gems are alive\n        if (this._gems[j1][k1].state !== GemState.ALIVE || this._gems[j2][k2].state !== GemState.ALIVE) {\n            return false;\n        }\n        // Check if positions are adjacent\n        var rowDiff = Math.abs(j1 - j2);\n        var colDiff = Math.abs(k1 - k2);\n        // Orthogonal move (horizontal or vertical)\n        if ((rowDiff === 1 && colDiff === 0) || (rowDiff === 0 && colDiff === 1)) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Finds matches starting from the specified position\n     */\n    Board.prototype.matchChain = function (j, k) {\n        // Return empty array if the gem is dead\n        if (this._gems[j][k].state !== GemState.ALIVE) {\n            return [];\n        }\n        var color = this._gems[j][k].color;\n        var chain = [];\n        // Define directions to check (horizontal and vertical)\n        var directions = [\n            { dj: 0, dk: 1 }, // right\n            { dj: 1, dk: 0 }, // down\n        ];\n        // Check each direction for matches\n        for (var _i = 0, directions_1 = directions; _i < directions_1.length; _i++) {\n            var dir = directions_1[_i];\n            var currentChain = [{ j: j, k: k }];\n            // Check in positive direction\n            this.checkDirection(j, k, dir.dj, dir.dk, color, currentChain);\n            // Check in negative direction\n            this.checkDirection(j, k, -dir.dj, -dir.dk, color, currentChain);\n            // If we found a valid chain, add it to our results\n            if (currentChain.length >= this._minLine) {\n                chain = chain.concat(currentChain);\n            }\n        }\n        // Remove duplicates from the chain\n        return this.removeDuplicates(chain);\n    };\n    /**\n     * Checks for matches in a specific direction\n     */\n    Board.prototype.checkDirection = function (j, k, dj, dk, color, chain) {\n        var currentJ = j + dj;\n        var currentK = k + dk;\n        while (currentJ >= 0 && currentJ < this._size &&\n            currentK >= 0 && currentK < this._size &&\n            this._gems[currentJ][currentK].state === GemState.ALIVE &&\n            this._gems[currentJ][currentK].color === color) {\n            chain.push({ j: currentJ, k: currentK });\n            currentJ += dj;\n            currentK += dk;\n        }\n    };\n    /**\n     * Removes duplicate positions from a chain\n     */\n    Board.prototype.removeDuplicates = function (chain) {\n        var uniquePositions = [];\n        var seen = new Set();\n        for (var _i = 0, chain_1 = chain; _i < chain_1.length; _i++) {\n            var pos = chain_1[_i];\n            var key = \"\".concat(pos.j, \",\").concat(pos.k);\n            if (!seen.has(key)) {\n                seen.add(key);\n                uniquePositions.push(pos);\n            }\n        }\n        return uniquePositions;\n    };\n    return Board;\n}());\n\n\n;// ./ts/Game.ts\n\n\n\nvar Game = /** @class */ (function () {\n    function Game() {\n        this.cluster = [];\n        this.chosen = false;\n        this.pause = true;\n        this.score = 0;\n        this.target = 0;\n        this.time = DEFAULT_SETTINGS.INITIAL_TIME;\n        this.level = 1;\n        this.chosenJ = -1;\n        this.chosenK = -1;\n        this.countdownInterval = null;\n        this.field = document.getElementById(ELEMENT_IDS.FIELD);\n        this.scoreboard = document.getElementById(ELEMENT_IDS.SCOREBOARD);\n        this.soundManager = SoundManager.getInstance();\n        // Initialize the board with default settings - always use 10x10 grid\n        this.board = new Board(this.field, DEFAULT_SETTINGS.INITIAL_SIZE, DEFAULT_SETTINGS.MIN_LINE, DEFAULT_SETTINGS.INITIAL_COLORS);\n        this.initEventListeners();\n        this.setupAudioContext();\n        this.startLevel(this.level);\n    }\n    Game.prototype.initEventListeners = function () {\n        var _this = this;\n        // Variables to track drag operations\n        var isDragging = false;\n        var startGem = null;\n        var startJ = -1;\n        var startK = -1;\n        var dragThreshold = 10; // Minimum pixels to consider a drag\n        var startX = 0;\n        var startY = 0;\n        // Handle touch start and mouse down\n        var handleStart = function (event) {\n            // Game must not be paused\n            if (_this.pause)\n                return;\n            // Get the target element\n            var target = event.target;\n            // Only process events on gem elements\n            if (!target.classList.contains(CSS_CLASSES.GEM))\n                return;\n            // Get the starting coordinates\n            if (event instanceof MouseEvent) {\n                startX = event.clientX;\n                startY = event.clientY;\n            }\n            else {\n                // Touch event\n                startX = event.touches[0].clientX;\n                startY = event.touches[0].clientY;\n            }\n            // Record the starting gem\n            startGem = target;\n            startJ = parseInt(target.getAttribute(DATA_ATTRIBUTES.J) || '0', 10);\n            startK = parseInt(target.getAttribute(DATA_ATTRIBUTES.K) || '0', 10);\n            // Add visual feedback\n            _this.board.getGem(startJ, startK).elem.classList.add(CSS_CLASSES.CHOSEN);\n            _this.soundManager.play(SoundManager.SOUND_EFFECTS.TURN);\n            // Start dragging\n            isDragging = true;\n        };\n        // Handle touch move and mouse move\n        var handleMove = function (event) {\n            // Only process if we're dragging\n            if (!isDragging || !startGem)\n                return;\n            // Prevent default behavior (scrolling, etc.)\n            event.preventDefault();\n            // Get current coordinates\n            var currentX, currentY;\n            if (event instanceof MouseEvent) {\n                currentX = event.clientX;\n                currentY = event.clientY;\n            }\n            else {\n                // Touch event\n                currentX = event.touches[0].clientX;\n                currentY = event.touches[0].clientY;\n            }\n            // Calculate the distance moved\n            var deltaX = currentX - startX;\n            var deltaY = currentY - startY;\n            var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n            // Add dragging class for visual feedback\n            if (distance > dragThreshold / 2) {\n                startGem.classList.add(CSS_CLASSES.DRAGGING);\n            }\n            // If we've moved enough to consider it a drag\n            if (distance > dragThreshold) {\n                // Determine the predominant direction (horizontal or vertical)\n                var isHorizontal = Math.abs(deltaX) > Math.abs(deltaY);\n                // Calculate the target position based on direction\n                var targetJ_1 = startJ;\n                var targetK_1 = startK;\n                if (isHorizontal) {\n                    // Horizontal movement\n                    targetK_1 = startK + (deltaX > 0 ? 1 : -1);\n                }\n                else {\n                    // Vertical movement\n                    targetJ_1 = startJ + (deltaY > 0 ? 1 : -1);\n                }\n                // Check if the target position is valid\n                if (targetJ_1 >= 0 && targetJ_1 < _this.board.size &&\n                    targetK_1 >= 0 && targetK_1 < _this.board.size &&\n                    _this.board.isCorrectTurn(startJ, startK, targetJ_1, targetK_1)) {\n                    // End the drag operation\n                    isDragging = false;\n                    // Remove visual feedback classes\n                    startGem.classList.remove(CSS_CLASSES.DRAGGING);\n                    _this.board.getGem(startJ, startK).elem.classList.remove(CSS_CLASSES.CHOSEN);\n                    // Temporarily disable further interactions\n                    _this.pause = true;\n                    // Swap the gems\n                    _this.board.swap(startJ, startK, targetJ_1, targetK_1);\n                    // Place gems immediately for visual feedback\n                    _this.board.getGem(startJ, startK).place();\n                    _this.board.getGem(targetJ_1, targetK_1).place();\n                    _this.soundManager.play(SoundManager.SOUND_EFFECTS.SWAP);\n                    // Check for matches\n                    _this.cluster = _this.board.matchChain(startJ, startK);\n                    _this.cluster = _this.cluster.concat(_this.board.matchChain(targetJ_1, targetK_1));\n                    if (_this.cluster.length === 0) {\n                        // No matches found, swap back with shorter delay\n                        setTimeout(function () {\n                            _this.board.swap(targetJ_1, targetK_1, startJ, startK);\n                            _this.board.getGem(startJ, startK).place();\n                            _this.board.getGem(targetJ_1, targetK_1).place();\n                            // Re-enable interactions\n                            _this.pause = false;\n                        }, DEFAULT_SETTINGS.SWAP_DELAY / 2);\n                    }\n                    else {\n                        // Matches found, remove them\n                        _this.kill(_this.cluster);\n                    }\n                }\n            }\n        };\n        // Handle touch end and mouse up\n        var handleEnd = function () {\n            // Only process if we were dragging\n            if (!isDragging || !startGem)\n                return;\n            // End the drag operation\n            isDragging = false;\n            // Remove visual feedback classes\n            startGem.classList.remove(CSS_CLASSES.DRAGGING);\n            // Remove highlight if we didn't complete a swap\n            if (_this.board.getGem(startJ, startK).elem.classList.contains(CSS_CLASSES.CHOSEN)) {\n                _this.board.getGem(startJ, startK).elem.classList.remove(CSS_CLASSES.CHOSEN);\n            }\n            // Reset starting values\n            startGem = null;\n            startJ = -1;\n            startK = -1;\n        };\n        // Add event listeners for mouse interactions\n        this.field.addEventListener('mousedown', handleStart);\n        document.addEventListener('mousemove', handleMove);\n        document.addEventListener('mouseup', handleEnd);\n        // Add event listeners for touch interactions\n        this.field.addEventListener('touchstart', handleStart, { passive: false });\n        document.addEventListener('touchmove', handleMove, { passive: false });\n        document.addEventListener('touchend', handleEnd);\n        // Keep the original click handler for backward compatibility\n        // but with modified behavior to work with the new drag system\n        this.field.addEventListener('click', function (event) {\n            var target = event.target;\n            // Only process clicks on gem elements\n            if (!target.classList.contains(CSS_CLASSES.GEM))\n                return;\n            // Game must not be paused\n            if (_this.pause)\n                return;\n            // Get gem coordinates\n            var j = parseInt(target.getAttribute(DATA_ATTRIBUTES.J) || '0', 10);\n            var k = parseInt(target.getAttribute(DATA_ATTRIBUTES.K) || '0', 10);\n            if (!_this.chosen) {\n                // First gem selection\n                _this.chosen = true;\n                _this.chosenJ = j;\n                _this.chosenK = k;\n                _this.board.getGem(j, k).elem.classList.add(CSS_CLASSES.CHOSEN);\n                _this.soundManager.play(SoundManager.SOUND_EFFECTS.TURN);\n            }\n            else {\n                // Second gem selection (attempting to swap)\n                _this.chosen = false;\n                // Remove highlight from first gem\n                _this.board.getGem(_this.chosenJ, _this.chosenK).elem.classList.remove(CSS_CLASSES.CHOSEN);\n                // Try to swap gems if it's a valid move\n                if (_this.board.isCorrectTurn(_this.chosenJ, _this.chosenK, j, k)) {\n                    // Temporarily disable further clicks to prevent multiple swaps\n                    _this.pause = true;\n                    // Swap the gems\n                    _this.board.swap(_this.chosenJ, _this.chosenK, j, k);\n                    // Place gems immediately for visual feedback\n                    _this.board.getGem(_this.chosenJ, _this.chosenK).place();\n                    _this.board.getGem(j, k).place();\n                    _this.soundManager.play(SoundManager.SOUND_EFFECTS.SWAP);\n                    // Check for matches immediately\n                    _this.cluster = _this.board.matchChain(_this.chosenJ, _this.chosenK);\n                    _this.cluster = _this.cluster.concat(_this.board.matchChain(j, k));\n                    if (_this.cluster.length === 0) {\n                        // No matches found, swap back with shorter delay\n                        setTimeout(function () {\n                            _this.board.swap(j, k, _this.chosenJ, _this.chosenK);\n                            _this.board.getGem(_this.chosenJ, _this.chosenK).place();\n                            _this.board.getGem(j, k).place();\n                            // Re-enable clicks\n                            _this.pause = false;\n                        }, DEFAULT_SETTINGS.SWAP_DELAY / 2);\n                    }\n                    else {\n                        // Matches found, remove them\n                        _this.kill(_this.cluster);\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Sets up audio context after user interaction\n     */\n    Game.prototype.setupAudioContext = function () {\n        var _this = this;\n        // Add a one-time event listener to enable audio after first user interaction\n        var enableAudio = function () {\n            // Notify sound manager that user interaction has occurred\n            _this.soundManager.userInteractionOccurred();\n            // Remove event listeners after first interaction\n            document.removeEventListener('click', enableAudio);\n            document.removeEventListener('touchstart', enableAudio);\n            document.removeEventListener('keydown', enableAudio);\n        };\n        // Add event listeners for common user interactions\n        document.addEventListener('click', enableAudio);\n        document.addEventListener('touchstart', enableAudio);\n        document.addEventListener('keydown', enableAudio);\n    };\n    Game.prototype.startLevel = function (level) {\n        var _this = this;\n        // Skip if board is not initialized\n        if (!this.board)\n            return;\n        // Calculate target score based on level using constants\n        this.target = Math.floor(DEFAULT_SETTINGS.TARGET_SCORE_FACTOR(level) * DEFAULT_SETTINGS.TARGET_SCORE_BASE);\n        // Always use 10x10 grid\n        var size = DEFAULT_SETTINGS.INITIAL_SIZE;\n        // Increase color variety as levels progress (max 10)\n        var colors = Math.min(DEFAULT_SETTINGS.INITIAL_COLORS + level - 1, 10);\n        // Determine game mode features based on level\n        this.determineGameModeForLevel(level);\n        // Display level information\n        this.displayLevelInfo(level);\n        // Set time limit based on level using constants\n        this.time = DEFAULT_SETTINGS.INITIAL_TIME + Math.floor(level * DEFAULT_SETTINGS.TIME_INCREASE_PER_LEVEL);\n        // Try to play background music (will only work after user interaction)\n        this.soundManager.playBackgroundMusic();\n        // Initialize the game board after a delay\n        setTimeout(function () {\n            // Create a new board with the fixed 10x10 size and settings\n            _this.board = new Board(_this.field, size, DEFAULT_SETTINGS.MIN_LINE, colors);\n            // Reset game state\n            _this.pause = false;\n            _this.score = 0;\n            _this.updateScoreboard();\n        }, DEFAULT_SETTINGS.LEVEL_START_DELAY);\n        // Start the countdown timer\n        this.startCountdownTimer();\n    };\n    /**\n     * Determines game mode features based on level\n     */\n    Game.prototype.determineGameModeForLevel = function (level) {\n        // No special game modes - only horizontal and vertical matches\n    };\n    /**\n     * Displays level information in the field element\n     */\n    Game.prototype.displayLevelInfo = function (level) {\n        this.field.innerHTML = \"Level \".concat(level);\n    };\n    /**\n     * Starts or restarts the countdown timer\n     */\n    Game.prototype.startCountdownTimer = function () {\n        var _this = this;\n        // Clear any existing timer\n        if (this.countdownInterval) {\n            clearInterval(this.countdownInterval);\n        }\n        // Set up the new timer\n        this.countdownInterval = window.setInterval(function () {\n            if (_this.time === 0) {\n                if (_this.score < _this.target) {\n                    // Game over - player didn't reach target score\n                    _this.handleGameOver();\n                }\n                else {\n                    // Level completed - advance to next level\n                    _this.handleLevelComplete();\n                }\n            }\n            else {\n                // Update time and display\n                _this.time -= 1;\n                _this.updateScoreboard();\n            }\n        }, DEFAULT_SETTINGS.COUNTDOWN_INTERVAL);\n    };\n    /**\n     * Updates the scoreboard with current score and time\n     */\n    Game.prototype.updateScoreboard = function () {\n        this.scoreboard.innerHTML = \"\".concat(this.score, \"/\").concat(this.target, \" | \").concat(this.time);\n    };\n    /**\n     * Handles game over state\n     */\n    Game.prototype.handleGameOver = function () {\n        var _this = this;\n        if (this.countdownInterval) {\n            clearInterval(this.countdownInterval);\n        }\n        this.pause = true;\n        this.field.innerHTML = 'GAME OVER';\n        this.soundManager.play(SoundManager.SOUND_EFFECTS.FAIL);\n        this.soundManager.pauseBackgroundMusic();\n        // Add restart button\n        var restartButton = document.createElement('div');\n        restartButton.id = ELEMENT_IDS.RESTART;\n        restartButton.innerHTML = 'RESTART';\n        restartButton.addEventListener('click', function () {\n            _this.level = 1;\n            _this.startLevel(_this.level);\n        });\n        this.field.appendChild(restartButton);\n    };\n    /**\n     * Handles level complete state\n     */\n    Game.prototype.handleLevelComplete = function () {\n        var _this = this;\n        if (this.countdownInterval) {\n            clearInterval(this.countdownInterval);\n        }\n        this.pause = true;\n        this.level++;\n        this.field.innerHTML = 'LEVEL COMPLETE';\n        this.soundManager.play(SoundManager.SOUND_EFFECTS.YES);\n        // Add next level button\n        var nextLevelButton = document.createElement('div');\n        nextLevelButton.id = ELEMENT_IDS.RESTART;\n        nextLevelButton.innerHTML = 'NEXT LEVEL';\n        nextLevelButton.addEventListener('click', function () {\n            _this.startLevel(_this.level);\n        });\n        this.field.appendChild(nextLevelButton);\n    };\n    /**\n     * Removes matched gems and updates score\n     */\n    Game.prototype.kill = function (cluster) {\n        this.pause = true;\n        // Update score based on matches\n        this.updateScoreForMatches(cluster);\n        // Process matched gems in batches for better performance\n        this.processMatchedGems(cluster);\n    };\n    /**\n     * Updates score based on matched gems\n     */\n    Game.prototype.updateScoreForMatches = function (cluster) {\n        // Apply bonus multiplier for larger matches\n        var sizeMultiplier = cluster.length > 4 ? 1.5 : 1;\n        this.score += Math.floor(cluster.length * DEFAULT_SETTINGS.SCORE_MULTIPLIER * sizeMultiplier);\n        this.updateScoreboard();\n        // Play explosion sound based on cluster size\n        if (cluster.length >= 5) {\n            this.soundManager.play(SoundManager.SOUND_EFFECTS.EXPLOSION_BIG);\n        }\n        else {\n            this.soundManager.play(SoundManager.SOUND_EFFECTS.EXPLOSION);\n        }\n    };\n    /**\n     * Processes matched gems (killing them and checking for new matches)\n     */\n    Game.prototype.processMatchedGems = function (cluster) {\n        var _this = this;\n        // Kill all gems in the cluster simultaneously\n        var batchSize = 5;\n        var processBatch = function (startIndex) {\n            var endIndex = Math.min(startIndex + batchSize, cluster.length);\n            // Process current batch\n            for (var i = startIndex; i < endIndex; i++) {\n                var pos = cluster[i];\n                // Kill the gem (this triggers the exit animation)\n                _this.board.getGem(pos.j, pos.k).kill();\n            }\n            // Process next batch or move to next step\n            if (endIndex < cluster.length) {\n                // Process next batch after a very short delay\n                setTimeout(function () { return processBatch(endIndex); }, 10);\n            }\n            else {\n                // All gems processed, wait for kill animation to complete\n                // then shift gems down\n                setTimeout(function () { return _this.shiftDown(); }, DEFAULT_SETTINGS.KILL_DELAY);\n            }\n        };\n        // Start processing the first batch\n        processBatch(0);\n    };\n    /**\n     * Shifts gems down to fill empty spaces\n     */\n    Game.prototype.shiftDown = function () {\n        var _this = this;\n        var shifted = false;\n        var _loop_1 = function (j) {\n            var _loop_2 = function (k) {\n                // If current gem is alive and the one below is dead, shift down\n                if (this_1.board.getGem(j, k).state === GemState.ALIVE &&\n                    this_1.board.getGem(j + 1, k).state === GemState.DEAD) {\n                    // Swap the gems\n                    this_1.board.swap(j, k, j + 1, k);\n                    // Add a very small delay based on row position for a subtle cascading effect\n                    var delay = (this_1.board.size - j) * 5; // Reduced from 10ms to 5ms for smoother animation\n                    setTimeout(function () {\n                        _this.board.getGem(j + 1, k).place(); // Place only the moved gem for efficiency\n                    }, delay);\n                    shifted = true;\n                }\n            };\n            for (var k = 0; k < this_1.board.size; k++) {\n                _loop_2(k);\n            }\n        };\n        var this_1 = this;\n        // Process all columns in parallel for better performance\n        for (var j = this.board.size - 2; j >= 0; j--) {\n            _loop_1(j);\n        }\n        // If any gems were shifted, continue checking with a delay\n        if (shifted) {\n            setTimeout(function () { return _this.shiftDown(); }, DEFAULT_SETTINGS.ANIMATION_DELAY / 2); // Reduced delay for faster animation\n        }\n        else {\n            // No more shifts needed, fill empty spaces and check for new matches\n            this.board.fillMap();\n            // Wait for fill animation to complete before checking for new matches\n            setTimeout(function () { return _this.findAndProcessNewMatches(); }, DEFAULT_SETTINGS.ANIMATION_DELAY / 2); // Reduced delay\n        }\n    };\n    /**\n     * Finds and processes new matches after shifting\n     */\n    Game.prototype.findAndProcessNewMatches = function () {\n        var _this = this;\n        // Add a delay to allow the falling animation to complete\n        setTimeout(function () {\n            var newCluster = [];\n            // Check the entire board for matches\n            for (var j = 0; j < _this.board.size; j++) {\n                for (var k = 0; k < _this.board.size; k++) {\n                    var gem = _this.board.getGem(j, k);\n                    if (gem.state === GemState.ALIVE) {\n                        var matches = _this.board.matchChain(j, k);\n                        if (matches.length > 0) {\n                            var _loop_3 = function (match) {\n                                // Check if this position is already in the cluster\n                                var isDuplicate = newCluster.some(function (pos) { return pos.j === match.j && pos.k === match.k; });\n                                if (!isDuplicate) {\n                                    newCluster.push(match);\n                                }\n                            };\n                            // Add unique matches to the cluster\n                            for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n                                var match = matches_1[_i];\n                                _loop_3(match);\n                            }\n                        }\n                    }\n                }\n            }\n            // If new matches found, kill them and continue the cascade\n            if (newCluster.length > 0) {\n                console.log(\"Found \".concat(newCluster.length, \" new matches in cascade\"));\n                // Process these matches, which will trigger another round of\n                // shiftDown and findAndProcessNewMatches when complete\n                _this.kill(newCluster);\n            }\n            else {\n                // No new matches, resume gameplay\n                _this.pause = false;\n            }\n        }, DEFAULT_SETTINGS.FALL_ANIMATION_DURATION + 50); // Reduced from 100ms to 50ms for faster animation\n    };\n    return Game;\n}());\n\n\n;// ./ts/main.ts\n\n/**\n * Main entry point for the Match3 game\n * Initializes the game when the DOM is fully loaded\n */\ndocument.addEventListener('DOMContentLoaded', function () {\n    // Initialize the game\n    var game = new Game();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n")}},__webpack_exports__={};__webpack_modules__[56]()})();